// <auto-generated />
using System;
using ApiModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BaseDbMigrations.Migrations
{
    [DbContext(typeof(WegesDbContext))]
    [Migration("20250121221244_RestOfAnexosList")]
    partial class RestOfAnexosList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("weges")
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiModel.Models.Anexo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnexoTipoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<long>("FicheiroId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateOnly>("Submetido")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AnexoTipoId");

                    b.HasIndex("FicheiroId");

                    b.ToTable("Anexos", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.AnexoTipo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("AnexoTipos", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.CertificadoERS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateOnly?>("DataExpiracao")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataExpiracaoTaxa")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataPagamentoTaxa")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataSubmissao")
                        .HasColumnType("date");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FicheiroId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("NrCertificado")
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Periodo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId")
                        .IsUnique();

                    b.HasIndex("FicheiroId");

                    b.ToTable("CertificadosERS", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.CodCae", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Designacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CodCaes", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Colaborador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ColaboradorTipoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("InicioAtividade")
                        .HasColumnType("date");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NrIdentificacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ServicoId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalHoras")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorTipoId");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("Colaborador", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.ColaboradorTipo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ColaboradorTipo", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.DirecaoClinica", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cargo")
                        .HasColumnType("text");

                    b.Property<string>("Cedula")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Especialidade")
                        .HasColumnType("text");

                    b.Property<long>("EspecialidadeId")
                        .HasColumnType("bigint");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Identificacao")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Ordem")
                        .HasColumnType("text");

                    b.Property<long?>("TipologiaId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("ValidadeIdentificacao")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("TipologiaId");

                    b.ToTable("DirecoesClinicas", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Entidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Denominacao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmailNotificacoesERS")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmailNotificacoesGerais")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Morada")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NifNipc")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("NrERS")
                        .HasColumnType("text");

                    b.Property<string>("Sigla")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.HasKey("Id");

                    b.ToTable("Entidades", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Estabelecimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Denominacao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly>("InicioAtividade")
                        .HasColumnType("date");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Morada")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Sigla")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TipoPrestador")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Estabelecimentos", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Ficheiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Localizacao")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tipo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Ficheiros", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Formacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ColaboradorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<int>("HorasFormacao")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorId");

                    b.ToTable("Formacao", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.LicencaERS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateOnly?>("DataSubmissao")
                        .HasColumnType("date");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FicheiroId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("NrLicenca")
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Periodo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId")
                        .IsUnique();

                    b.HasIndex("FicheiroId");

                    b.ToTable("LicencasERS", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Servico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<DateOnly?>("DataInicio")
                        .HasColumnType("date");

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Horario")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("system-usr");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Responsavel")
                        .HasColumnType("text");

                    b.Property<long?>("TipologiaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TipologiaId");

                    b.ToTable("Servicos", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Tipologia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tipologias", "weges");
                });

            modelBuilder.Entity("CodCaeEntidade", b =>
                {
                    b.Property<long>("CodCaesId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntidadesId")
                        .HasColumnType("bigint");

                    b.HasKey("CodCaesId", "EntidadesId");

                    b.HasIndex("EntidadesId");

                    b.ToTable("CodCaeEntidade", "weges");
                });

            modelBuilder.Entity("EstabelecimentoAlvaras", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoAlvaras", "weges");
                });

            modelBuilder.Entity("EstabelecimentoCartoesNipc", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoCartoesNipc", "weges");
                });

            modelBuilder.Entity("EstabelecimentoDireitosDeveres", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoDireitosDeveres", "weges");
                });

            modelBuilder.Entity("EstabelecimentoFicheirosAnexar", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoFicheirosAnexar", "weges");
                });

            modelBuilder.Entity("EstabelecimentoLicenciamentoRegistoLegal", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoLicenciamentoRegistoLegal", "weges");
                });

            modelBuilder.Entity("EstabelecimentoListaVerificacao", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoListaVerificacao", "weges");
                });

            modelBuilder.Entity("EstabelecimentoMedidasANPC", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoMedidasANPC", "weges");
                });

            modelBuilder.Entity("EstabelecimentoParecerANPC", b =>
                {
                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnexoId")
                        .HasColumnType("bigint");

                    b.HasKey("EstabelecimentoId", "AnexoId");

                    b.HasIndex("AnexoId");

                    b.ToTable("EstabelecimentoParecerANPC", "weges");
                });

            modelBuilder.Entity("ApiModel.Models.Anexo", b =>
                {
                    b.HasOne("ApiModel.Models.AnexoTipo", "AnexoTipo")
                        .WithMany()
                        .HasForeignKey("AnexoTipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Ficheiro", "Ficheiro")
                        .WithMany()
                        .HasForeignKey("FicheiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnexoTipo");

                    b.Navigation("Ficheiro");
                });

            modelBuilder.Entity("ApiModel.Models.CertificadoERS", b =>
                {
                    b.HasOne("ApiModel.Models.Estabelecimento", "Estabelecimento")
                        .WithOne("CertificadoERS")
                        .HasForeignKey("ApiModel.Models.CertificadoERS", "EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Ficheiro", "Ficheiro")
                        .WithMany()
                        .HasForeignKey("FicheiroId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Estabelecimento");

                    b.Navigation("Ficheiro");
                });

            modelBuilder.Entity("ApiModel.Models.Colaborador", b =>
                {
                    b.HasOne("ApiModel.Models.ColaboradorTipo", "ColaboradorTipo")
                        .WithMany()
                        .HasForeignKey("ColaboradorTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", "Estabelecimento")
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColaboradorTipo");

                    b.Navigation("Estabelecimento");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("ApiModel.Models.DirecaoClinica", b =>
                {
                    b.HasOne("ApiModel.Models.Tipologia", "Tipologia")
                        .WithMany()
                        .HasForeignKey("TipologiaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tipologia");
                });

            modelBuilder.Entity("ApiModel.Models.Formacao", b =>
                {
                    b.HasOne("ApiModel.Models.Colaborador", null)
                        .WithMany("Formacoes")
                        .HasForeignKey("ColaboradorId");
                });

            modelBuilder.Entity("ApiModel.Models.LicencaERS", b =>
                {
                    b.HasOne("ApiModel.Models.Estabelecimento", "Estabelecimento")
                        .WithOne("LicencaERS")
                        .HasForeignKey("ApiModel.Models.LicencaERS", "EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Ficheiro", "Ficheiro")
                        .WithMany()
                        .HasForeignKey("FicheiroId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Estabelecimento");

                    b.Navigation("Ficheiro");
                });

            modelBuilder.Entity("ApiModel.Models.Servico", b =>
                {
                    b.HasOne("ApiModel.Models.Tipologia", "Tipologia")
                        .WithMany()
                        .HasForeignKey("TipologiaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tipologia");
                });

            modelBuilder.Entity("CodCaeEntidade", b =>
                {
                    b.HasOne("ApiModel.Models.CodCae", null)
                        .WithMany()
                        .HasForeignKey("CodCaesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Entidade", null)
                        .WithMany()
                        .HasForeignKey("EntidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoAlvaras", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoCartoesNipc", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoDireitosDeveres", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoFicheirosAnexar", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoLicenciamentoRegistoLegal", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoListaVerificacao", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoMedidasANPC", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstabelecimentoParecerANPC", b =>
                {
                    b.HasOne("ApiModel.Models.Anexo", null)
                        .WithMany()
                        .HasForeignKey("AnexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiModel.Models.Estabelecimento", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiModel.Models.Colaborador", b =>
                {
                    b.Navigation("Formacoes");
                });

            modelBuilder.Entity("ApiModel.Models.Estabelecimento", b =>
                {
                    b.Navigation("CertificadoERS");

                    b.Navigation("LicencaERS");
                });
#pragma warning restore 612, 618
        }
    }
}
