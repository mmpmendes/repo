@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using System.Security.Claims
@using Services
@using SharedKernel.Models

@inject UserManagementService userService;
@inject NavigationManager navigationManager;

<h3>Entrar</h3>
<EditForm Model="_loginModel" OnValidSubmit="LoginCall">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="_loginModel.Email" />
    </div>

    <div>
        <label>Palavra-passe:</label>
        <InputText type="password" @bind-Value="_loginModel.Password" />
    </div>

    <button type="submit">Login</button>
</EditForm>
<br />
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}
<label>Se ainda não tem conta por favor registe-se <a href="/register">aqui</a></label>

@code {
    private LoginModel _loginModel = new LoginModel();
    private string message { get; set; } = string.Empty;

    private async Task LoginCall()
    {
        var response = await userService.LoginUserAsync(_loginModel);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var tokens = JsonConvert.DeserializeObject<AccessTokenResponse>(content);
            if (tokens is not null)
            {
                var info = await userService.GetUserInfoAsync(tokens.AccessToken);
                message = info is not null ? info.Email : "Não Logado";
            }
            else
            {
                // Handle error getting user information
                message = "Impossível encontrar a informação do utilizador.";
            }
        }
        else
        {
            message = "Credenciais Inválidas.";
        }
    }
}