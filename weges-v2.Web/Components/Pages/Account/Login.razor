@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using weges_v2.Services
@using weges_v2.SharedKernel.Models

@inject UserManagementService userService;
@inject NavigationManager navigationManager;

<h3>Entrar</h3>
<EditForm Model="_loginModel" OnValidSubmit="LoginCall">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="_loginModel.Email" />
    </div>

    <div>
        <label>Palavra-passe:</label>
        <InputText type="password" @bind-Value="_loginModel.Password" />
    </div>

    <button type="submit">Login</button>
</EditForm>
<br />
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}
<label>Se ainda não tem conta por favor registe-se <a href="/register">aqui</a></label>

@code {
    private LoginModel _loginModel = new LoginModel();
    private string message { get; set; } = string.Empty;
    private AccessTokenResponse userInfo { get; set; }
    // [Inject]
    // private CustomAuthenticationStateProvider authStateProvider { get; set; }
    // [CascadingParameter] 
    // public Task<AuthenticationState> AuthTask { get; set; }
    private async Task LoginCall()
    {
        // Call the login service
        var response = await userService.LoginUserAsync(_loginModel);
        if (response.IsSuccessStatusCode)
        {
            // Redirect to the home page
            // navigationManager.NavigateTo("/");

            // Assuming API returns a token or user info
            userInfo = await response.Content.ReadFromJsonAsync<AccessTokenResponse>();
            // authStateProvider.SetAuthenticatedUser(userInfo.Email, userInfo.Role);

        }
        else{
            message = "Credenciais Inválidas.";
        }
    }
}